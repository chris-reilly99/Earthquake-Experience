{{!-- Draw ESRI map and load earthquake data from USGS --}}

<script>
    require(["esri/Map", "esri/layers/GeoJSONLayer", "esri/views/MapView"], (
        Map,
        GeoJSONLayer,
        MapView
    ) => {
        const url = "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_month.geojson";
        const template = {
            title: "Earthquake Info",
            content: "Magnitude {mag} {type} hit {place} on {time}",
            fieldInfos: [
                {
                    fieldName: 'time',
                    format: {
                        dateFormat: 'short-date-short-time'
                    }
                }
            ]
        };

        const renderer = {
            type: "simple",
            field: "mag",
            symbol: {
                type: "simple-marker",
                color: "orange",
                outline: {
                    color: "white"
                }
            },
            visualVariables: [{
                type: "size",
                field: "mag",
                stops: [{
                    value: 2.5,
                    size: "4px"
                },
                {
                    value: 8,
                    size: "40px"
                }
                ]
            },
            ]
        };

        {{!-- Add a new earthquakeLayer and use it to display mag, place, time and tsunami --}}
        const earthquakeLayer = new GeoJSONLayer({
            url: url,
            copyright: "USGS Earthquakes",
            renderer: renderer,
            orderBy: {
                field: "mag"
            },
            outFields: ["mag", "place", "time", "tsunami"]
        });

        {{!-- Store the extent and zoom in local storage so that when the map is redrawn,
        the same location/zoom level is stored. --}}
        let viewExtentString = localStorage.getItem("view_extent");
        let viewExtent = null;
        if (viewExtentString) {
            viewExtent = JSON.parse(viewExtentString);
        }

        let viewZoomString = localStorage.getItem("view_zoom");
        let viewZoom = 4;
        if (viewZoomString) {
            viewZoom = JSON.parse(viewZoomString);
        }

        const map = new Map({
            basemap: "satellite",
            layers: [earthquakeLayer],
        });

    const view = new MapView({
        container: "viewDiv",
        center: [-168, 46],
        extent: viewExtent,
        zoom: viewZoom,
        map: map
    });

    // Sample map code from ESRI, slightly modified for earthquakes
    // https://developers.arcgis.com/javascript/latest/sample-code/sandbox/?sample=view-hittest

    view
        .when()
        .then(() => {
            return earthquakeLayer.when();
        })
        .then((layer) => {
            return view.whenLayerView(layer);
        })
        .then((layerView) => {
            view.on("pointer-down", eventHandler);

            function eventHandler(event) {
                // Use locally stored extent and zoom to keep the map in the same place after refresh
                localStorage.setItem("view_extent", JSON.stringify(view.extent));
                localStorage.setItem("view_zoom", JSON.stringify(view.zoom));
                // only include graphics from hurricanesLayer in the hitTest
                const opts = {
                    include: earthquakeLayer
                };
                // the hitTest() checks to see if any graphics from the hurricanesLayer
                // intersect the x, y coordinates of the pointer
                view.hitTest(event, opts).then(getGraphics);
            }

            let highlight, currentYear, currentName;

            function getGraphics(response) {
                // the topmost graphic from the hurricanesLayer and display select attribute 
                // values from the graphic to the user
                if (response.results.length) {
                    const graphic = response.results[0].graphic;
                    const attributes = graphic.attributes;
                    const category = attributes.CAT;

                    fetch("/api/earthquake", {
                        method: "POST",
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(attributes)
                    }).then(res => {
                        document.location.replace('/');
                        console.log("Request complete! response:", res);
                    });
                }
            };
        });
    });

</script>

{{!-- Draw the map --}}
<div class="map" id="viewDiv"></div>

{{!-- Source the side panel view --}}
<div class="panel">
    {{#if eq}}
    <div></div>
    {{/if}}
    {{> side-panel}}
</div>